// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: remote_work_processor_service.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Body:
	//
	//	*ClientMessage_ProbeSession
	//	*ClientMessage_TaskExecutionResponse
	//	*ClientMessage_ReconcileEvent
	//	*ClientMessage_ConfirmConfigUpdate
	//	*ClientMessage_ConfirmEnabled
	//	*ClientMessage_ConfirmDisabled
	Body isClientMessage_Body `protobuf_oneof:"body"`
}

func (x *ClientMessage) Reset() {
	*x = ClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_work_processor_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMessage) ProtoMessage() {}

func (x *ClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_remote_work_processor_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMessage.ProtoReflect.Descriptor instead.
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return file_remote_work_processor_service_proto_rawDescGZIP(), []int{0}
}

func (m *ClientMessage) GetBody() isClientMessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *ClientMessage) GetProbeSession() *ProbeSessionMessage {
	if x, ok := x.GetBody().(*ClientMessage_ProbeSession); ok {
		return x.ProbeSession
	}
	return nil
}

func (x *ClientMessage) GetTaskExecutionResponse() *TaskExecutionResponseMessage {
	if x, ok := x.GetBody().(*ClientMessage_TaskExecutionResponse); ok {
		return x.TaskExecutionResponse
	}
	return nil
}

func (x *ClientMessage) GetReconcileEvent() *ReconcileEventMessage {
	if x, ok := x.GetBody().(*ClientMessage_ReconcileEvent); ok {
		return x.ReconcileEvent
	}
	return nil
}

func (x *ClientMessage) GetConfirmConfigUpdate() *ConfirmConfigUpdateMessage {
	if x, ok := x.GetBody().(*ClientMessage_ConfirmConfigUpdate); ok {
		return x.ConfirmConfigUpdate
	}
	return nil
}

func (x *ClientMessage) GetConfirmEnabled() *ConfirmEnabledMessage {
	if x, ok := x.GetBody().(*ClientMessage_ConfirmEnabled); ok {
		return x.ConfirmEnabled
	}
	return nil
}

func (x *ClientMessage) GetConfirmDisabled() *ConfirmDisabledMessage {
	if x, ok := x.GetBody().(*ClientMessage_ConfirmDisabled); ok {
		return x.ConfirmDisabled
	}
	return nil
}

type isClientMessage_Body interface {
	isClientMessage_Body()
}

type ClientMessage_ProbeSession struct {
	ProbeSession *ProbeSessionMessage `protobuf:"bytes,1,opt,name=probe_session,json=probeSession,proto3,oneof"`
}

type ClientMessage_TaskExecutionResponse struct {
	TaskExecutionResponse *TaskExecutionResponseMessage `protobuf:"bytes,2,opt,name=task_execution_response,json=taskExecutionResponse,proto3,oneof"`
}

type ClientMessage_ReconcileEvent struct {
	ReconcileEvent *ReconcileEventMessage `protobuf:"bytes,3,opt,name=reconcile_event,json=reconcileEvent,proto3,oneof"`
}

type ClientMessage_ConfirmConfigUpdate struct {
	ConfirmConfigUpdate *ConfirmConfigUpdateMessage `protobuf:"bytes,4,opt,name=confirm_config_update,json=confirmConfigUpdate,proto3,oneof"`
}

type ClientMessage_ConfirmEnabled struct {
	ConfirmEnabled *ConfirmEnabledMessage `protobuf:"bytes,5,opt,name=confirm_enabled,json=confirmEnabled,proto3,oneof"`
}

type ClientMessage_ConfirmDisabled struct {
	ConfirmDisabled *ConfirmDisabledMessage `protobuf:"bytes,6,opt,name=confirm_disabled,json=confirmDisabled,proto3,oneof"`
}

func (*ClientMessage_ProbeSession) isClientMessage_Body() {}

func (*ClientMessage_TaskExecutionResponse) isClientMessage_Body() {}

func (*ClientMessage_ReconcileEvent) isClientMessage_Body() {}

func (*ClientMessage_ConfirmConfigUpdate) isClientMessage_Body() {}

func (*ClientMessage_ConfirmEnabled) isClientMessage_Body() {}

func (*ClientMessage_ConfirmDisabled) isClientMessage_Body() {}

type ServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Body:
	//
	//	*ServerMessage_TaskExecutionRequest
	//	*ServerMessage_UpdateConfigRequest
	//	*ServerMessage_EnableRequest
	//	*ServerMessage_DisableRequest
	//	*ServerMessage_NextEventRequest
	Body isServerMessage_Body `protobuf_oneof:"body"`
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_work_processor_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_remote_work_processor_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_remote_work_processor_service_proto_rawDescGZIP(), []int{1}
}

func (m *ServerMessage) GetBody() isServerMessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *ServerMessage) GetTaskExecutionRequest() *TaskExecutionRequestMessage {
	if x, ok := x.GetBody().(*ServerMessage_TaskExecutionRequest); ok {
		return x.TaskExecutionRequest
	}
	return nil
}

func (x *ServerMessage) GetUpdateConfigRequest() *UpdateConfigRequestMessage {
	if x, ok := x.GetBody().(*ServerMessage_UpdateConfigRequest); ok {
		return x.UpdateConfigRequest
	}
	return nil
}

func (x *ServerMessage) GetEnableRequest() *EnableRequestMessage {
	if x, ok := x.GetBody().(*ServerMessage_EnableRequest); ok {
		return x.EnableRequest
	}
	return nil
}

func (x *ServerMessage) GetDisableRequest() *DisableRequestMessage {
	if x, ok := x.GetBody().(*ServerMessage_DisableRequest); ok {
		return x.DisableRequest
	}
	return nil
}

func (x *ServerMessage) GetNextEventRequest() *NextEventRequestMessage {
	if x, ok := x.GetBody().(*ServerMessage_NextEventRequest); ok {
		return x.NextEventRequest
	}
	return nil
}

type isServerMessage_Body interface {
	isServerMessage_Body()
}

type ServerMessage_TaskExecutionRequest struct {
	TaskExecutionRequest *TaskExecutionRequestMessage `protobuf:"bytes,1,opt,name=task_execution_request,json=taskExecutionRequest,proto3,oneof"`
}

type ServerMessage_UpdateConfigRequest struct {
	UpdateConfigRequest *UpdateConfigRequestMessage `protobuf:"bytes,2,opt,name=update_config_request,json=updateConfigRequest,proto3,oneof"`
}

type ServerMessage_EnableRequest struct {
	EnableRequest *EnableRequestMessage `protobuf:"bytes,3,opt,name=enable_request,json=enableRequest,proto3,oneof"`
}

type ServerMessage_DisableRequest struct {
	DisableRequest *DisableRequestMessage `protobuf:"bytes,4,opt,name=disable_request,json=disableRequest,proto3,oneof"`
}

type ServerMessage_NextEventRequest struct {
	NextEventRequest *NextEventRequestMessage `protobuf:"bytes,5,opt,name=next_event_request,json=nextEventRequest,proto3,oneof"`
}

func (*ServerMessage_TaskExecutionRequest) isServerMessage_Body() {}

func (*ServerMessage_UpdateConfigRequest) isServerMessage_Body() {}

func (*ServerMessage_EnableRequest) isServerMessage_Body() {}

func (*ServerMessage_DisableRequest) isServerMessage_Body() {}

func (*ServerMessage_NextEventRequest) isServerMessage_Body() {}

var File_remote_work_processor_service_proto protoreflect.FileDescriptor

var file_remote_work_processor_service_proto_rawDesc = []byte{
	0x0a, 0x23, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x73, 0x61, 0x70, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70,
	0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x15, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x05, 0x0a, 0x0d,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x62, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x61, 0x70, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70,
	0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x7e, 0x0a, 0x17, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x73, 0x61, 0x70, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c,
	0x6f, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x15, 0x74, 0x61, 0x73, 0x6b,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x68, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x61, 0x70,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x78, 0x0a, 0x15, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x73, 0x61, 0x70,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x73, 0x61, 0x70, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x6b, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x61, 0x70, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x22, 0xd0, 0x04, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x7b, 0x0a, 0x16, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x73, 0x61, 0x70, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x14, 0x74,
	0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x73, 0x61, 0x70, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c,
	0x6f, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x65, 0x0a,
	0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x61, 0x70, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x73, 0x61, 0x70, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f,
	0x0a, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x61, 0x70,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6e,
	0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x32, 0x99, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7b, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x2e, 0x73, 0x61, 0x70, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f,
	0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x35, 0x2e, 0x73, 0x61, 0x70, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28,
	0x01, 0x30, 0x01, 0x42, 0x88, 0x01, 0x0a, 0x30, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x61, 0x70, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42, 0x1f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x31, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x41, 0x50, 0x2f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x3b, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_remote_work_processor_service_proto_rawDescOnce sync.Once
	file_remote_work_processor_service_proto_rawDescData = file_remote_work_processor_service_proto_rawDesc
)

func file_remote_work_processor_service_proto_rawDescGZIP() []byte {
	file_remote_work_processor_service_proto_rawDescOnce.Do(func() {
		file_remote_work_processor_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_remote_work_processor_service_proto_rawDescData)
	})
	return file_remote_work_processor_service_proto_rawDescData
}

var file_remote_work_processor_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_remote_work_processor_service_proto_goTypes = []interface{}{
	(*ClientMessage)(nil),                // 0: sap.autopilot.remote.work.processor.v1.ClientMessage
	(*ServerMessage)(nil),                // 1: sap.autopilot.remote.work.processor.v1.ServerMessage
	(*ProbeSessionMessage)(nil),          // 2: sap.autopilot.remote.work.processor.v1.ProbeSessionMessage
	(*TaskExecutionResponseMessage)(nil), // 3: sap.autopilot.remote.work.processor.v1.TaskExecutionResponseMessage
	(*ReconcileEventMessage)(nil),        // 4: sap.autopilot.remote.work.processor.v1.ReconcileEventMessage
	(*ConfirmConfigUpdateMessage)(nil),   // 5: sap.autopilot.remote.work.processor.v1.ConfirmConfigUpdateMessage
	(*ConfirmEnabledMessage)(nil),        // 6: sap.autopilot.remote.work.processor.v1.ConfirmEnabledMessage
	(*ConfirmDisabledMessage)(nil),       // 7: sap.autopilot.remote.work.processor.v1.ConfirmDisabledMessage
	(*TaskExecutionRequestMessage)(nil),  // 8: sap.autopilot.remote.work.processor.v1.TaskExecutionRequestMessage
	(*UpdateConfigRequestMessage)(nil),   // 9: sap.autopilot.remote.work.processor.v1.UpdateConfigRequestMessage
	(*EnableRequestMessage)(nil),         // 10: sap.autopilot.remote.work.processor.v1.EnableRequestMessage
	(*DisableRequestMessage)(nil),        // 11: sap.autopilot.remote.work.processor.v1.DisableRequestMessage
	(*NextEventRequestMessage)(nil),      // 12: sap.autopilot.remote.work.processor.v1.NextEventRequestMessage
}
var file_remote_work_processor_service_proto_depIdxs = []int32{
	2,  // 0: sap.autopilot.remote.work.processor.v1.ClientMessage.probe_session:type_name -> sap.autopilot.remote.work.processor.v1.ProbeSessionMessage
	3,  // 1: sap.autopilot.remote.work.processor.v1.ClientMessage.task_execution_response:type_name -> sap.autopilot.remote.work.processor.v1.TaskExecutionResponseMessage
	4,  // 2: sap.autopilot.remote.work.processor.v1.ClientMessage.reconcile_event:type_name -> sap.autopilot.remote.work.processor.v1.ReconcileEventMessage
	5,  // 3: sap.autopilot.remote.work.processor.v1.ClientMessage.confirm_config_update:type_name -> sap.autopilot.remote.work.processor.v1.ConfirmConfigUpdateMessage
	6,  // 4: sap.autopilot.remote.work.processor.v1.ClientMessage.confirm_enabled:type_name -> sap.autopilot.remote.work.processor.v1.ConfirmEnabledMessage
	7,  // 5: sap.autopilot.remote.work.processor.v1.ClientMessage.confirm_disabled:type_name -> sap.autopilot.remote.work.processor.v1.ConfirmDisabledMessage
	8,  // 6: sap.autopilot.remote.work.processor.v1.ServerMessage.task_execution_request:type_name -> sap.autopilot.remote.work.processor.v1.TaskExecutionRequestMessage
	9,  // 7: sap.autopilot.remote.work.processor.v1.ServerMessage.update_config_request:type_name -> sap.autopilot.remote.work.processor.v1.UpdateConfigRequestMessage
	10, // 8: sap.autopilot.remote.work.processor.v1.ServerMessage.enable_request:type_name -> sap.autopilot.remote.work.processor.v1.EnableRequestMessage
	11, // 9: sap.autopilot.remote.work.processor.v1.ServerMessage.disable_request:type_name -> sap.autopilot.remote.work.processor.v1.DisableRequestMessage
	12, // 10: sap.autopilot.remote.work.processor.v1.ServerMessage.next_event_request:type_name -> sap.autopilot.remote.work.processor.v1.NextEventRequestMessage
	0,  // 11: sap.autopilot.remote.work.processor.v1.RemoteWorkProcessorService.Session:input_type -> sap.autopilot.remote.work.processor.v1.ClientMessage
	1,  // 12: sap.autopilot.remote.work.processor.v1.RemoteWorkProcessorService.Session:output_type -> sap.autopilot.remote.work.processor.v1.ServerMessage
	12, // [12:13] is the sub-list for method output_type
	11, // [11:12] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_remote_work_processor_service_proto_init() }
func file_remote_work_processor_service_proto_init() {
	if File_remote_work_processor_service_proto != nil {
		return
	}
	file_client_messages_proto_init()
	file_server_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_remote_work_processor_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_work_processor_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_remote_work_processor_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ClientMessage_ProbeSession)(nil),
		(*ClientMessage_TaskExecutionResponse)(nil),
		(*ClientMessage_ReconcileEvent)(nil),
		(*ClientMessage_ConfirmConfigUpdate)(nil),
		(*ClientMessage_ConfirmEnabled)(nil),
		(*ClientMessage_ConfirmDisabled)(nil),
	}
	file_remote_work_processor_service_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ServerMessage_TaskExecutionRequest)(nil),
		(*ServerMessage_UpdateConfigRequest)(nil),
		(*ServerMessage_EnableRequest)(nil),
		(*ServerMessage_DisableRequest)(nil),
		(*ServerMessage_NextEventRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_remote_work_processor_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_remote_work_processor_service_proto_goTypes,
		DependencyIndexes: file_remote_work_processor_service_proto_depIdxs,
		MessageInfos:      file_remote_work_processor_service_proto_msgTypes,
	}.Build()
	File_remote_work_processor_service_proto = out.File
	file_remote_work_processor_service_proto_rawDesc = nil
	file_remote_work_processor_service_proto_goTypes = nil
	file_remote_work_processor_service_proto_depIdxs = nil
}
